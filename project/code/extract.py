# Extract words from .asm files and put it into .csv file

import os
import time
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer

from utils import add_dfs

DATA_RAW_PATH = '/home/docky/data/train/raw/'
DATA_BOW_PATH = '/home/docky/data/train/bow/'
CHARS_TO_REMOVE = [',', ';', ':', '.']

MAX_FEATURES = 100000 # None
LIMIT = 100

def count_to_tfidf(count_df):
    transformer = TfidfTransformer()
    tfidf_trans = transformer.fit_transform(count_df)
    tfidf_vect = pd.DataFrame(
        tfidf_trans.toarray(), 
        index = count_df.index, 
        columns = count_df.columns
    )
    return tfidf_vect


def count_df_from_docs(filepaths):

    labels = []
    docs = []
    corpus = []

    i = 0
    for filepath in filepaths:
        i = i+1
        doc = filepath.split('/')[-1]
        docs.append(doc)
        print(i, 'of', len(filepaths), doc)

        with open(filepath, encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        for char_to_remove in CHARS_TO_REMOVE:
            content.replace(char_to_remove, ' ')
        corpus.append(content)

    count_vect = CountVectorizer(max_features=MAX_FEATURES)
    count_X = count_vect.fit_transform(corpus)
    count_features = count_vect.get_feature_names_out()
    count_df = pd.DataFrame(
        data = count_X.toarray(),
        index = docs,
        columns = count_features
    )

    return count_df


def main():

    labels = []
    paths = []
    corpus = []

    i = 0
    for filename in os.listdir(DATA_RAW_PATH):
        if i < LIMIT:
            i = i+1
            filepath = os.path.join(DATA_RAW_PATH, filename)
            paths.append(filepath)

    df1 = count_df_from_docs(paths)
    # df2 = count_df_from_docs(paths[0:2+1])
    # df3 = count_df_from_docs(paths[3:5+1])

    print(df1)
    # print(df2)
    # print(df3)

    # df4 = add_dfs(df2, df3)
    # print(df4)
        

if __name__ == '__main__':
    start = time.time()
    main()
    stop = time.time()
    print(round(stop-start), 'secs')